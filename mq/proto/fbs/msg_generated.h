// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSG_LIBTBAG_PROTO_FBS_MSG_H_
#define FLATBUFFERS_GENERATED_MSG_LIBTBAG_PROTO_FBS_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace libtbag {
namespace proto {
namespace fbs {
namespace msg {

struct MsgPacket;

struct MsgPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENT = 4,
    VT_DATA = 6
  };
  int32_t event() const {
    return GetField<int32_t>(VT_EVENT, 0);
  }
  const flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_EVENT) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct MsgPacketBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event(int32_t event) {
    fbb_.AddElement<int32_t>(MsgPacket::VT_EVENT, event, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(MsgPacket::VT_DATA, data);
  }
  explicit MsgPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MsgPacketBuilder &operator=(const MsgPacketBuilder &);
  flatbuffers::Offset<MsgPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MsgPacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<MsgPacket> CreateMsgPacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t event = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0) {
  MsgPacketBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_event(event);
  return builder_.Finish();
}

inline flatbuffers::Offset<MsgPacket> CreateMsgPacketDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t event = 0,
    const std::vector<int8_t> *data = nullptr) {
  return libtbag::proto::fbs::msg::CreateMsgPacket(
      _fbb,
      event,
      data ? _fbb.CreateVector<int8_t>(*data) : 0);
}

inline const libtbag::proto::fbs::msg::MsgPacket *GetMsgPacket(const void *buf) {
  return flatbuffers::GetRoot<libtbag::proto::fbs::msg::MsgPacket>(buf);
}

inline const libtbag::proto::fbs::msg::MsgPacket *GetSizePrefixedMsgPacket(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<libtbag::proto::fbs::msg::MsgPacket>(buf);
}

inline bool VerifyMsgPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<libtbag::proto::fbs::msg::MsgPacket>(nullptr);
}

inline bool VerifySizePrefixedMsgPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<libtbag::proto::fbs::msg::MsgPacket>(nullptr);
}

inline void FinishMsgPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<libtbag::proto::fbs::msg::MsgPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMsgPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<libtbag::proto::fbs::msg::MsgPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msg
}  // namespace fbs
}  // namespace proto
}  // namespace libtbag

#endif  // FLATBUFFERS_GENERATED_MSG_LIBTBAG_PROTO_FBS_MSG_H_
